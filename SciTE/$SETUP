; <COMPILER: v1.1.34.02>
#NoEnv
#NoTrayIcon
#SingleInstance Ignore
SendMode, Input
SetWorkingDir, %A_ScriptDir%
global uititle := "SciTE4AutoHotkey Setup"
global programVer
global winVer := Util_GetWinVer()
global ahkPath := Util_GetAhkPath()
global ahkVer := Util_GetAhkVer()
global intlAhkName := ""
global hasLegacyAhk := ahkVer < "1.1"
global previousInstallDir := ""
global inInstall := false
SplitPath, A_AhkPath, intlAhkName
global installDebug := !InStr(intlAhkName, "InternalAHK")
if (winVer < 6) or !A_Is64bitOS
{
MsgBox, 16, %uititle%, This version of Microsoft Windows is not supported by SciTE4AutoHotkey.
ExitApp
}
if 1 = /uninstall
{
MsgBox, 52, %uititle%, Are you sure you want to remove SciTE4AutoHotkey?
IfMsgBox, Yes
{
FileCopy, %A_AhkPath%, %A_Temp%, 1
FileCopy, %A_ScriptFullPath%, %A_Temp%, 1
runasverb := A_IsAdmin ? "" : "*RunAs "
Run, %runasverb%"%A_Temp%\%intlAhkName%" /CP65001 "%A_Temp%\%A_ScriptName%" /douninstall
}
ExitApp
}
if 1 = /douninstall
{
Btn_PerformUninstall()
ExitApp
}
scitepath := installDebug ? "..\source\SciTE.exe" : "SciTE.exe"
Menu, Tray, Icon, %scitepath%
FileGetVersion, programVer, %scitepath%
programVer := Format("{:d}.{:d}.{:d}", StrSplit(programVer, ".")*)
if !installDebug
SetWorkingDir ..
else
hasLegacyAhk := true
if !FileExist("dialog.html") || !FileExist("banner.png")
{
MsgBox, 48, %uititle%, Oops `;p
ExitApp
}
Gui, New, +LastFound, %uititle%
Gui, Margin, 0, 0
try DllCall("UxTheme\SetWindowThemeAttribute", "ptr", installerHwnd := WinExist(), "int", 1, "int64*", (3<<32)|3, "int", 8)
Gui, Add, ActiveX, vwb w600 h420 hwndhwb, Shell.Explorer
ComObjConnect(wb, "wb_")
OnMessage(0x100, "gui_KeyDown", 2)
InitUI()
Gui, Show
return
GuiClose:
Btn_Exit()
return
InitUI()
{
global wb
SetWBClientSite(wb)
wb.Silent := true
wb.Navigate("file://" A_WorkingDir "\dialog.html")
while wb.ReadyState != 4
Sleep, 10
doc := getDocument()
doc.getElementById("versionTag").innerText := "version " programVer
doc.getElementById("yearTag1").innerText := A_Year
doc.getElementById("yearTag2").innerText := A_Year
logicalDPI := doc.parentWindow.screen.logicalXDPI, deviceDPI := doc.parentWindow.screen.deviceXDPI
if (A_ScreenDPI != 96)
doc.body.style.zoom := A_ScreenDPI/96 * (logicalDPI/deviceDPI)
doc.body.focus()
}
gui_KeyDown(wParam, lParam, nMsg, hWnd)
{
global wb
if (Chr(wParam) ~= "[A-Z]" || wParam = 0x74)
return
pipa := ComObjQuery(wb, "{00000117-0000-0000-C000-000000000046}")
VarSetCapacity(kMsg, 48), NumPut(A_GuiY, NumPut(A_GuiX
, NumPut(A_EventInfo, NumPut(lParam, NumPut(wParam
, NumPut(nMsg, NumPut(hWnd, kMsg)))), "uint"), "int"), "int")
Loop 2
r := DllCall(NumGet(NumGet(1*pipa)+5*A_PtrSize), "ptr", pipa, "ptr", &kMsg)
until wParam != 9 || wb.Document.activeElement != ""
ObjRelease(pipa)
if r = 0
return 0
}
wb_BeforeNavigate2(wb, url, flags, frame, postdata, headers, cancel)
{
if !RegExMatch(url, "^ahk://(.*?)/(.*)", m)
return
static func, prms
func := m1
prms := []
StringReplace, m2, m2, `%20, %A_Space%, All
Loop, Parse, m2, `,
prms.Insert(A_LoopField)
NumPut(-1, ComObjValue(cancel), "short")
SetTimer, wb_bn2_call, -15
return
wb_bn2_call:
%func%(prms*)
func := prms := ""
return
}
wb_NavigateError(wb, url, frame, status, cancel)
{
wb_BeforeNavigate2(wb, url, 0, frame, "", "", cancel)
}
getDocument()
{
global wb
return wb.document
}
getWindow()
{
return getDocument().parentWindow
}
switchPage(page)
{
getWindow().switchPage(page)
}
Btn_Exit()
{
global inInstall, installerHwnd
if inInstall
return
Gui %installerHwnd%:Destroy
ExitApp
}
Btn_Install()
{
Gui +OwnDialogs
if !ahkPath
{
MsgBox, 16, %uititle%, Could not find existing AutoHotkey installation!
return
}
RegRead, existingSciTEPath, HKLM, Software\SciTE4AutoHotkey, InstallDir
previousInstall := !ErrorLevel
if previousInstall
{
defPath := existingSciTEPath
RegRead, defEdit, HKLM, Software\SciTE4AutoHotkey, InstallDefEditor
RegRead, defSS, HKLM, Software\SciTE4AutoHotkey, InstallDefSS
RegRead, defDS, HKLM, Software\SciTE4AutoHotkey, InstallDefDS
previousInstallDir := defPath
}else
{
defPath := ahkPath "\SciTE"
defEdit := true
defSS := true
defDS := true
}
document := getDocument()
document.getElementById("opt_installdir").value := defPath
SetCheckBox(document.getElementById("opt_defedit"), defEdit)
SetCheckBox(document.getElementById("opt_startlnks"), defSS)
SetCheckBox(document.getElementById("opt_desklnks"), defDS)
document.getElementById("stmtext").innerText .= (winVer < 6.2 || winVer >= 10.0) ? "Create shortcuts in the Start menu" : "Add tiles to the Start screen"
if hasLegacyAhk
{
document.getElementById("obsoletecounter").innerText := "over " (A_Year - 2009) " years old"
document.getElementById("ahkver").innerText := "v" ahkVer
switchPage("legacyahkinfo")
}else
switchPage("setupopt")
}
Lnk_AhkWebsite()
{
Run, https://www.autohotkey.com/download
}
SetCheckBox(oCheckBox, state)
{
oCheckBox.checked := ComBool(state)
}
ComBool(x)
{
return ComObject(0xB, x ? -1 : 0)
}
Btn_Browse()
{
Gui +OwnDialogs
oTextBox := getDocument().getElementById("opt_installdir")
FileSelectFolder, ov, % "*" oTextBox.value, 3, Please select the SciTE4AutoHotkey installation directory.
if ErrorLevel || !ov
return
oTextBox.value := ov
}
closeSciTE()
{
while WinExist("ahk_class SciTEWindow")
{
MsgBox, 53, %uititle%, SciTE4AutoHotkey is currently running. Please close it before continuing.
IfMsgBox, Cancel
return false
}
return true
}
Btn_PerformInstall()
{
Gui +OwnDialogs
if installDebug
{
switchPage("setuprgr")
MsgBox, 64, %uititle%, Not going to happen
return
}
if !closeSciTE()
return
document := getDocument()
installDir := document.getElementById("opt_installdir").value
bDefaultEditor := document.getElementById("opt_defedit").checked != 0
bStartShortcuts := document.getElementById("opt_startlnks").checked != 0
bDesktopShortcuts := document.getElementById("opt_desklnks").checked != 0
folderExists := InStr(FileExist(installDir), "D")
if !previousInstallDir && folderExists
{
MsgBox, 52, %uititle%, The specified installation folder already exists. Setup will first delete all of its contents before installing. Are you sure?
IfMsgBox, No
return
}
inInstall := true
switchPage("setuprgr")
IfNotExist, %installDir%
FileCreateDir, %installDir%
else Loop, %installDir%\*.*, 1
{
IfInString, A_LoopFileAttrib, D
RemoveDir(A_LoopFileLongPath)
else
FileDelete, %A_LoopFileLongPath%
}
oShell := ComObjCreate("Shell.Application")
targetFolderObj := oShell.Namespace(installDir)
sourceFolderObj := oShell.Namespace(A_ScriptDir)
targetFolderObj.CopyHere(sourceFolderObj.Items, 16 | 2048)
uninstallProg = %installDir%\%intlAhkName%
uninstallArgs = /CP65001 "%installDir%\%A_ScriptName%" /uninstall
key = Software\Microsoft\Windows\CurrentVersion\Uninstall\SciTE4AutoHotkey
RegWrite, REG_SZ, HKLM, %key%, DisplayName, SciTE4AutoHotkey v%programVer%
RegWrite, REG_SZ, HKLM, %key%, DisplayVersion, v%programVer%
RegWrite, REG_SZ, HKLM, %key%, Publisher, fincs
RegWrite, REG_SZ, HKLM, %key%, DisplayIcon, %installDir%\SciTE.exe
RegWrite, REG_SZ, HKLM, %key%, URLInfoAbout, https://www.autohotkey.com/scite4ahk/
RegWrite, REG_SZ, HKLM, %key%, UninstallString, "%uninstallProg%" %uninstallArgs%
RegWrite, REG_SZ, HKLM, Software\Classes\SciTE4AHK.Application,, SciTE4AHK.Application
RegWrite, REG_SZ, HKLM, Software\Classes\SciTE4AHK.Application\CLSID,, {D7334085-22FB-416E-B398-B5038A5A0784}
RegWrite, REG_SZ, HKLM, Software\Classes\SciTE4AHK.Application\Shell\Open\command,, "%installDir%\SciTE.exe" "`%1"
RegWrite, REG_SZ, HKLM, Software\Classes\SciTE4AHK.Application\Shell\Open, FriendlyAppName, SciTE4AutoHotkey
RegWrite, REG_SZ, HKLM, Software\Classes\CLSID\{D7334085-22FB-416E-B398-B5038A5A0784},, SciTE4AHK.Application
RegWrite, REG_SZ, HKCR, .ahk\OpenWithProgids, SciTE4AHK.Application
if bDefaultEditor
RegWrite, REG_SZ, HKCR, AutoHotkeyScript\Shell\Edit\command,, "%installDir%\SciTE.exe" "`%1"
if bDesktopShortcuts
Util_CreateShortcut(A_DesktopCommon "\SciTE4AutoHotkey.lnk", installDir "\SciTE.exe", "AutoHotkey Script Editor")
if bStartShortcuts
{
FileCreateDir, %A_ProgramsCommon%\SciTE4AutoHotkey
Util_CreateShortcut(A_ProgramsCommon "\SciTE4AutoHotkey\SciTE4AutoHotkey.lnk", installDir "\SciTE.exe", "AutoHotkey Script Editor")
Util_CreateShortcut(A_ProgramsCommon "\SciTE4AutoHotkey\Uninstall.lnk", uninstallProg, "Uninstall SciTE4AutoHotkey...", uninstallArgs, installDir "\toolicon.icl", 20)
}
RegWrite, REG_SZ, HKLM, Software\SciTE4AutoHotkey, InstallDir, %installDir%
RegWrite, REG_DWORD, HKLM, Software\SciTE4AutoHotkey, InstallDefEditor, %bDefaultEditor%
RegWrite, REG_DWORD, HKLM, Software\SciTE4AutoHotkey, InstallDefSS, %bStartShortcuts%
RegWrite, REG_DWORD, HKLM, Software\SciTE4AutoHotkey, InstallDefDS, %bDesktopShortcuts%
MsgBox, 64, %uititle%, Done! Thank you for choosing SciTE4AutoHotkey.
Util_UserRun(installDir "\SciTE.exe")
inInstall := false
gosub GuiClose
}
Btn_PerformUninstall()
{
if !closeSciTE()
return
RegRead, installDir, HKLM, Software\SciTE4AutoHotkey, InstallDir
RegRead, defEdit, HKLM, Software\SciTE4AutoHotkey, InstallDefEditor
RegRead, defSS, HKLM, Software\SciTE4AutoHotkey, InstallDefSS
RegRead, defDS, HKLM, Software\SciTE4AutoHotkey, InstallDefDS
RemoveDir(installDir "\")
RegDelete, HKLM, Software\SciTE4AutoHotkey
RegDelete, HKLM, Software\Microsoft\Windows\CurrentVersion\Uninstall\SciTE4AutoHotkey
RegDelete, HKLM, Software\Classes\SciTE4AHK.Application
RegDelete, HKLM, Software\Classes\CLSID\{D7334085-22FB-416E-B398-B5038A5A0784}
RegDelete, HKCR, .ahk\OpenWithProgids, SciTE4AHK.Application
if defEdit
RegWrite, REG_SZ, HKCR, AutoHotkeyScript\Shell\Edit\command,, notepad.exe `%1
if defSS
RemoveDir(A_ProgramsCommon "\SciTE4AutoHotkey\")
if defDS
FileDelete, %A_DesktopCommon%\SciTE4AutoHotkey.lnk
MsgBox, 52, %uititle%, Do you want to remove the user profile?
IfMsgBox, Yes
WipeProfile(A_MyDocuments "\AutoHotkey\SciTE\")
MsgBox, 64, %uititle%, SciTE4AutoHotkey uninstalled successfully!
}
amvl_This_and_next_line_added_by_Ahk2Exe:
Exit
Util_GetAhkPath()
{
RegRead, ov, HKLM, SOFTWARE\AutoHotkey, InstallDir
if !ov && A_Is64bitOS
{
q := A_RegView
SetRegView, 64
RegRead, ov, HKLM, SOFTWARE\AutoHotkey, InstallDir
SetRegView, %q%
}
return ov
}
Util_GetAhkVer()
{
RegRead, ov, HKLM, SOFTWARE\AutoHotkey, Version
if !ov && A_Is64bitOS
{
q := A_RegView
SetRegView, 64
RegRead, ov, HKLM, SOFTWARE\AutoHotkey, Version
SetRegView, %q%
}
return ov
}
Util_GetWinVer()
{
pack := DllCall("GetVersion", "uint") & 0xFFFF
pack := (pack & 0xFF) "." (pack >> 8)
pack += 0
return pack
}
Util_CreateShortcut(Shrt, Path, Descr, Args := "", Icon := "", IconN := "")
{
SplitPath, Path,, Dir
FileDelete, %Shrt%
FileCreateShortcut, %Path%, %Shrt%, %Dir%, %Args%, %Descr%, %Icon%,, %IconN%
}
Util_UserRun(target, args := "")
{
try
_ShellRun(target, args)
catch e
Run, % args="" ? target : target " " args
}
_ShellRun(prms*)
{
shellWindows := ComObjCreate("{9BA05972-F6A8-11CF-A442-00A0C90A8F39}")
VarSetCapacity(_hwnd, 4, 0)
desktop := shellWindows.FindWindowSW(0, "", 8, ComObj(0x4003, &_hwnd), 1)
if ptlb := ComObjQuery(desktop
, "{4C96BE40-915C-11CF-99D3-00AA004AE837}"
, "{000214E2-0000-0000-C000-000000000046}")
{
if DllCall(NumGet(NumGet(ptlb+0)+15*A_PtrSize), "ptr", ptlb, "ptr*", psv:=0) = 0
{
VarSetCapacity(IID_IDispatch, 16)
NumPut(0x46000000000000C0, NumPut(0x20400, IID_IDispatch, "int64"), "int64")
DllCall(NumGet(NumGet(psv+0)+15*A_PtrSize), "ptr", psv
, "uint", 0, "ptr", &IID_IDispatch, "ptr*", pdisp:=0)
shell := ComObj(9,pdisp,1).Application
shell.ShellExecute(prms*)
ObjRelease(psv)
}
ObjRelease(ptlb)
}
}
global WBClientSite
SetWBClientSite(wb)
{
interfaces := {
	(Join,
		IOleClientSite: [0,3,1,0,1,0]
		IServiceProvider: [3]
		IInternetSecurityManager: [1,1,3,4,8,7,3,3]
)}
unkQI      := RegisterCallback("WBClientSite_QI", "Fast")
unkAddRef  := RegisterCallback("WBClientSite_AddRef", "Fast")
unkRelease := RegisterCallback("WBClientSite_Release", "Fast")
WBClientSite := {_buffers: bufs := {}}, bufn := 0
for name, prms in interfaces
{
bufn += 1
bufs.SetCapacity(bufn, (4 + prms.MaxIndex()) * A_PtrSize)
buf := bufs.GetAddress(bufn)
NumPut(unkQI,      buf + 1*A_PtrSize)
NumPut(unkAddRef,  buf + 2*A_PtrSize)
NumPut(unkRelease, buf + 3*A_PtrSize)
for i, prmc in prms
NumPut(RegisterCallback("WBClientSite_" name, "Fast", prmc+1, i), buf + (3+i)*A_PtrSize)
NumPut(buf + A_PtrSize, buf + 0)
WBClientSite[name] := buf
}
if pOleObject := ComObjQuery(wb, "{00000112-0000-0000-C000-000000000046}")
{
DllCall(NumGet(NumGet(pOleObject+0)+3*A_PtrSize), "ptr"
, pOleObject, "ptr", WBClientSite.IOleClientSite, "uint")
ObjRelease(pOleObject)
}
}
WBClientSite_QI(p, piid, ppvObject)
{
static IID_IUnknown := "{00000000-0000-0000-C000-000000000046}"
static IID_IOleClientSite := "{00000118-0000-0000-C000-000000000046}"
static IID_IServiceProvider := "{6d5140c1-7436-11ce-8034-00aa006009fa}"
iid := _String4GUID(piid)
if (iid = IID_IOleClientSite || iid = IID_IUnknown)
{
NumPut(WBClientSite.IOleClientSite, ppvObject+0)
return 0
}
if (iid = IID_IServiceProvider)
{
NumPut(WBClientSite.IServiceProvider, ppvObject+0)
return 0
}
NumPut(0, ppvObject+0)
return 0x80004002
}
WBClientSite_AddRef(p)
{
return 1
}
WBClientSite_Release(p)
{
return 1
}
WBClientSite_IOleClientSite(p, p1="", p2="", p3="")
{
if (A_EventInfo = 3)
{
NumPut(0, p1+0)
return 0x80004002
}
return 0x80004001
}
WBClientSite_IServiceProvider(p, pguidService, piid, ppvObject)
{
static IID_IUnknown := "{00000000-0000-0000-C000-000000000046}"
static IID_IInternetSecurityManager := "{79eac9ee-baf9-11ce-8c82-00aa004ba90b}"
if (_String4GUID(pguidService) = IID_IInternetSecurityManager)
{
iid := _String4GUID(piid)
if (iid = IID_IInternetSecurityManager || iid = IID_IUnknown)
{
NumPut(WBClientSite.IInternetSecurityManager, ppvObject+0)
return 0
}
NumPut(0, ppvObject+0)
return 0x80004002
}
NumPut(0, ppvObject+0)
return 0x80004001
}
WBClientSite_IInternetSecurityManager(p, p1="", p2="", p3="", p4="", p5="", p6="", p7="", p8="")
{
if (A_EventInfo = 5)
{
if (p2 = 0x1400)
{
NumPut(0, p3+0)
return 0
}
}
return 0x800C0011
}
_String4GUID(pGUID)
{
VarSetCapacity(String, 38*2)
DllCall("ole32\StringFromGUID2", "ptr", pGUID, "str", String, "int", 39)
return String
}
RemoveDir(dir)
{
IfExist, %dir%
{
FileRemoveDir, %dir%, 1
return 1
}else
return 0
}
WipeProfile(profile)
{
RemoveDir(profile)
FileRemoveDir, %A_MyDocuments%\AutoHotkey\Lib
FileRemoveDir, %A_MyDocuments%\AutoHotkey
}